program 3 Hello Print Program
#include <stdio.h>
#include <unistd.h>

int main() {
    int p[2];
    char *messages[] = {"Hello, friends", "Hello, world #2", "Hello, world #3"};
    char buffer[16];

    pipe(p);  // Create pipe

    for (int i = 0; i < 3; i++) 
        write(p[1], messages[i], 16);  // Write messages to pipe

    for (int i = 0; i < 3; i++) {
        read(p[0], buffer, 16);  // Read from pipe
        printf("%s\n", buffer);
    }

    return 0;
}

program 4 Character Count in String
#include <stdio.h>
#include <string.h>

int main() {
    char s[1000], c;
    int count = 0;

    printf("Enter string: ");
    fgets(s, sizeof(s), stdin);

    printf("Enter character: ");
    c = getchar();

    for (int i = 0; s[i]; i++) 
        if (s[i] == c) count++;

    printf("Character '%c' appears %d times.\n", c, count);
    
    return 0;
}

program 5 Bit Count
#include <stdio.h>

int countBits(int n) {
    int count = 0;
    while (n) {
        count += n & 1;  // Check if the last bit is 1
        n >>= 1;         // Shift right by 1 bit
    }
    return count;
}

int main() {
    int num;
    printf("Enter number: ");
    scanf("%d", &num);
    printf("Set Bits: %d\n", countBits(num));
    return 0;
}

program 6 GNU C frame generation program
#include <stdio.h>
#include <string.h>

void generateFrames(char *message, int frameLength) {
    int i;
    printf("Frames:\n");
    for (i = 0; i < strlen(message); i += frameLength) {
        printf("Frame: %.10s\n", message + i);
    }
}

int main() {
    char message[1000];
    int frameLength;

    printf("Enter message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0';  // Remove newline

    printf("Enter frame length: ");
    scanf("%d", &frameLength);

    generateFrames(message, frameLength);
    
    return 0;
}

program 7 II)   Character Stuffing Program
#include <stdio.h>
#include <string.h>

void characterStuffing(char *input, char delimiter) {
    char stuffed[200];
    int j = 0;

    stuffed[j++] = delimiter;  // Start delimiter
    for (int i = 0; i < strlen(input); i++) {
        if (input[i] == delimiter) stuffed[j++] = delimiter;  // Escape duplicate delimiter
        stuffed[j++] = input[i];
    }
    stuffed[j++] = delimiter;  // End delimiter
    stuffed[j] = '\0';  // Null terminator

    printf("Stuffed Frame: %s\n", stuffed);
}

int main() {
    char input[100], delimiter;

    printf("Enter frame: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = 0;  // Remove newline

    printf("Enter delimiter character: ");
    delimiter = getchar();

    characterStuffing(input, delimiter);
    
    return 0;
}

program 8 Byte Stuffing
#include <stdio.h>
#include <string.h>

int main() {
    char data[50][50], frame[50][50], flag[] = "flag", esc[] = "esc";
    int n, i, k = 0;

    printf("Enter number of words: ");
    scanf("%d", &n);
    getchar();  // Clear buffer

    printf("Enter the words:\n");
    for (i = 0; i < n; i++) {
        fgets(data[i], sizeof(data[i]), stdin);
        data[i][strcspn(data[i], "\n")] = '\0';  // Remove newline
    }

    strcpy(frame[k++], flag);  // Start flag
    for (i = 0; i < n; i++) {
        if (strcmp(data[i], flag) == 0 || strcmp(data[i], esc) == 0) {
            strcpy(frame[k++], esc);
        }
        strcpy(frame[k++], data[i]);
    }
    strcpy(frame[k++], flag);  // End flag

    printf("Byte Stuffed Data:\n");
    for (i = 0; i < k; i++) printf("%s ", frame[i]);

    return 0;
}

program 9 Bit Stuffing
#include <stdio.h>
#include <string.h>

int main() {
    char data[100], stuffed[200];
    int count = 0, j = 0;

    printf("Enter data: ");
    scanf("%s", data);

    for (int i = 0; i < strlen(data); i++) {
        stuffed[j++] = data[i];
        count = (data[i] == '1') ? count + 1 : 0;
        if (count == 5) stuffed[j++] = '0', count = 0;
    }

    stuffed[j] = '\0';
    printf("Bit Stuffed Data: %s\n", stuffed);
    
    return 0;
}

program 10 LRC
#include <stdio.h>

unsigned char calculateLRC(unsigned char data[], int length) {
    unsigned char lrc = 0;
    for (int i = 0; i < length; i++) lrc += data[i];
    return (~lrc) + 1;  // 1's complement
}

int main() {
    unsigned char data[] = {0x41, 0x42, 0x43, 0x44};  // "ABCD" in ASCII
    int length = sizeof(data) / sizeof(data[0]);

    unsigned char lrc = calculateLRC(data, length);
    printf("LRC Check Value: %02X\n", lrc);

    return 0;
}

prog 11 Checksum
#include <stdio.h>

int checksum(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) sum += arr[i];
    return ~sum; // 1's complement of sum
}

int main() {
    int n, sch;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter array elements: ");
    for (int i = 0; i < n; i++) scanf("%d", &arr[i]);
    
    sch = checksum(arr, n);
    printf("Sender Checksum: %d\n", sch);
    
    // Simulating receiver side
    printf("Receiver Sum: %d\n", checksum(arr, n) + sch);
    printf("Final Checksum: %d\n", checksum(arr, n) + sch ? ~checksum(arr, n) : 0);
    
    return 0;
}

prog 12 CRC
#include <stdio.h>
#include <string.h>

void crc(char data[], char gen_poly[], char check_value[]) {
    int N = strlen(gen_poly);
    strcpy(check_value, data);

    for (int i = 0; i < strlen(data) - N + 1; i++) {
        if (check_value[i] == '1') {
            for (int j = 0; j < N; j++) {
                check_value[i + j] = (check_value[i + j] == gen_poly[j]) ? '0' : '1';
            }
        }
    }
}

int main() {
    char data[28], gen_poly[10], check_value[28];

    printf("Enter data: ");
    scanf("%s", data);
    printf("Enter generator polynomial: ");
    scanf("%s", gen_poly);

    strcat(data, "000");  // Append zeros
    crc(data, gen_poly, check_value);
    printf("CRC Check Value: %s\n", check_value);
    
    return 0;
}

prog 13 Hamming Code
#include <stdio.h>
#include <math.h>

void hammingCode(int data[], int n) {
    int p_n = 0, c_l, i, j;
    
    while (n > (int)pow(2, p_n) - (p_n + 1)) p_n++;
    c_l = p_n + n;
    
    int code[c_l];
    j = 0;
    
    for (i = 0; i < c_l; i++) {
        if (i == (int)pow(2, j) - 1) {
            code[i] = 0; j++;
        } else {
            code[i] = data[j++];  
        }
    }

    for (i = 0; i < p_n; i++) {
        int pos = (int)pow(2, i);
        int count = 0;
        for (int k = pos - 1; k < c_l; k += 2 * pos) {
            for (int m = k; m < k + pos && m < c_l; m++) {
                if (code[m] == 1) count++;
            }
        }
        code[pos - 1] = (count % 2 == 0) ? 0 : 1;
    }

    printf("Hamming Code: ");
    for (i = 0; i < c_l; i++) printf("%d", code[i]);
    printf("\n");
}

int main() {
    int data[32], n;
    
    printf("Enter length of data word: ");
    scanf("%d", &n);
    
    printf("Enter data word: ");
    for (int i = 0; i < n; i++) scanf("%d", &data[i]);
    
    hammingCode(data, n);
    
    return 0;
}


prog 14 Token Bucket Algorithm
#include <stdio.h>

int main() {
    int bucket_size, output_rate, bucket = 0, incoming;

    printf("Enter bucket size and output rate: ");
    scanf("%d %d", &bucket_size, &output_rate);

    while (1) {
        printf("Enter incoming packets: ");
        scanf("%d", &incoming);

        // Fill bucket or drop excess packets
        bucket = (bucket + incoming > bucket_size) ? bucket_size : bucket + incoming;

        // Transmit packets
        bucket = (bucket >= output_rate) ? bucket - output_rate : 0;
        printf("Bucket status: %d\n", bucket);
    }

    return 0;
}


prog 15 VRC
#include <stdio.h>

int main() {
    int data[7], vrc = 0;
    
    printf("Enter 7 bits: ");
    for(int i = 0; i < 7; i++) {
        scanf("%d", &data[i]);
        vrc ^= data[i];  // XOR operation directly in loop
    }
    
    printf("VRC bit: %d\n", vrc);
    return 0;
}
